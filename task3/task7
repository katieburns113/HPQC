import numpy as np

# Global state
workspace = np.array([1.])

# Push a qubit to the system
def pushQubit(weights):
    global workspace
    weights = np.array(weights, dtype=complex)
    workspace = np.kron(workspace, weights)

# Apply a gate to the entire system (1-qubit or full system gates only)
def applyGate(gate):
    global workspace
    gate_qubits = int(np.log2(gate.shape[0]))
    state_qubits = int(np.log2(workspace.size))

    if gate_qubits != state_qubits:
        raise ValueError(f"Gate expects {gate_qubits} qubits, but workspace has {state_qubits}.")
    
    workspace.shape = (-1, gate.shape[0])
    np.matmul(workspace, gate.T, out=workspace)

# ------------------------------------
# Test pushing 3 qubits
workspace = np.array([1.])
pushQubit([1, 0])
pushQubit([1, 0])
print("After pushing |0⟩, |0⟩:", workspace)

pushQubit([3/5, 4/5])
print("After pushing [3/5, 4/5]:", workspace)

# ------------------------------------
# Pauli-X Gate (NOT)
X_gate = np.array([[0, 1],
                   [1, 0]])

workspace = np.array([1.])
pushQubit([1, 0])
print("Input to X gate:", workspace)
applyGate(X_gate)
print("Output from X gate:", workspace)

# ------------------------------------
# Hadamard Gate
H_gate = np.array([[1, 1],
                   [1, -1]]) * np.sqrt(1/2)

workspace = np.array([1.])
pushQubit([1, 0])
print("Input to H gate:", workspace)
applyGate(H_gate)
print("Output from H gate:", workspace)

# ------------------------------------
# T Gate (complex phase gate)
T_gate = np.array([[1, 0],
                   [0, np.exp(np.pi / -4j)]])

workspace = np.array([1.+0j])
pushQubit([0.6, 0.8])
print("Input to T gate:", workspace)
applyGate(T_gate)
print("Output from T gate:", workspace)

# ------------------------------------
# SWAP gate for 2 qubits
SWAP_gate = np.array([[1, 0, 0, 0],
                      [0, 0, 1, 0],
                      [0, 1, 0, 0],
                      [0, 0, 0, 1]])

workspace = np.array([1.])
pushQubit([1, 0])          # Qubit 1
pushQubit([0.6, 0.8])      # Qubit 2
print("Before SWAP:", workspace)
applyGate(SWAP_gate)
print("After SWAP:", workspace)

# -------------Move a Qubit to the Top of the Stack------------#
def tosQubit(k):
    global workspace
    if k > 1:  # if non-trivial
        workspace = np.reshape(workspace, (-1, 2, 2**(k-1)))
        workspace = np.swapaxes(workspace, -2, -1)
        workspace = workspace.reshape(-1)  # restore to flat vector
workspace = np.array([1.])  # Corrected: 1D array
pushQubit([1, 0])
pushQubit([0.6, 0.8])
print("Before tosQubit:", workspace)
tosQubit(2)
print("After tosQubit:", workspace)
print(np.reshape(workspace,(1,-1)))

#--------Measure a quibit-------#
def probQubit():
    global workspace
    workspace = np.reshape(workspace,(-1,2)) 
    return np.linalg.norm(workspace,axis=0)**2
def measureQubit():
    global workspace
    prob = probQubit()
    measurement = np.random.choice(2,p=prob)         # select 0 or 1 
    workspace = (workspace[:,[measurement]]/
    np.sqrt(prob[measurement])) 
    return str(measurement)

workspace = np.array([[1. ]])
for n in range(30):
    pushQubit([0.6,0.8])
    print(measureQubit(), end="")

workspace = np.array([[1.]]) 
for i in range(16):
    pushQubit([1,0])                      # push a zero qubit
    applyGate(H_gate)                     # set equal 0 and 1 probability
    pushQubit([1,0])                      # push a 2nd zero qubit
    applyGate(H_gate)                     # set equal 0 and 1 probability
    pushQubit([1,0])                      # push a dummy zero qubit
    q3 = measureQubit()                   # pop qubit 3
    q2 = measureQubit()                   # pop qubit 2
    q1 = measureQubit()                   # pop qubit 1
    print(q1+q2+q3,end=",")









